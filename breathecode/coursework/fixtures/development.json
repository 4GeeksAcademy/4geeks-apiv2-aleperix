[{"model": "coursework.course", "pk": 1, "fields": {"slug": "full-stack", "name": "Full Stack Development", "logo": null, "duration_in_hours": 350, "duration_in_days": 28, "week_hours": 20, "created_at": "2020-11-09T16:55:14.912Z", "updated_at": "2020-11-09T16:55:14.912Z"}}, {"model": "coursework.course", "pk": 2, "fields": {"slug": "full-stack-ft", "name": "Full Stack Full Time", "logo": null, "duration_in_hours": 380, "duration_in_days": 20, "week_hours": 40, "created_at": "2020-11-09T16:55:44.728Z", "updated_at": "2020-11-09T16:55:44.728Z"}}, {"model": "coursework.syllabus", "pk": 1, "fields": {"version": 1, "json": {"days": [{"label": "Day 1", "lessons": [{"slug": "css-layouts", "title": "Doing Layouts"}, {"slug": "mastering-css-selectors", "title": "Advanced CSS Selectors"}], "project": {"title": "Simple Instagram", "solution": "https://bitbucket.org/codingacademy/instagram-without-bootstrap/", "instructions": "https://projects.breatheco.de/d/instagram-feed#readme"}, "quizzes": [{"slug": "html", "title": "Basics of HTML"}, {"slug": "internet-architecture", "title": "Internet Architecture"}, {"slug": "css", "title": "Basics of CSS"}], "replits": [{"slug": "layouts", "title": "Doing Layouts"}], "homework": "Students must finish the Instagram & the Postcard.", "assignments": ["instagram-feed", "postcard", "instagram-post"], "description": "During the prework you learned basic HTML and CSS, but here your will learn the evolved CSS that enables amazing layouts with boxes and also a rich set of CSS Selectors", "instructions": "Students know already basic CSS and HTML, just go over the concepts really fast but stop and explain carefully the Display and Position rules. Then, start coding the project.", "key-concepts": ["Everything is text!", "Always Be Closing", "Client vs Server", "HTTP Request vs Response", "Browser Interpretation", "HTML vs CSS", "CSS Selectors (basic ones)", "Do not use ID as CSS selectors (use specificity)", "::Before & ::After Selectors", "DRY Technique", "Box Model"], "technologies": ["CSS3", "HTML5"]}, {"label": "Day 2", "lessons": [{"slug": "bootstrap-tutorial-of-bootstrap-4", "title": "Working with Bootstrap"}], "project": {"title": "Bootstrap Instagram", "solution": "https://bitbucket.org/codingacademy/instagram-with-bootstrap/", "instructions": "https://projects.breatheco.de/d/instagram-feed-bootstrap#readme"}, "replits": [{"slug": "bootstrap", "title": "Working with Bootstrap"}], "assignments": ["instagram-feed-bootstrap"], "description": "Bootstrap arrived to profesionalize websites, removing 99% of the layout pain. Everything is a component from now on.", "instructions": "Explain bootstrap and how it solves 99% of the pain. Everything is a component from now own.", "key-concepts": ["Bootstrap", "Components", "Workflow: Identify the components, Copy&Paste them and finally customize them", "Helper/Utility Classes that come with Bootstrap"], "technologies": ["Bootstrap"]}, {"label": "Day 3", "lessons": [{"slug": "the-command-line-the-terminal", "title": "The Command Line"}], "project": {"title": "The CMD Challenge", "instructions": "https://github.com/breatheco-de/exercise-terminal-challenge/"}, "replits": [{"slug": "the-command-line", "title": "Command Line Interactive Challenge"}], "homework": "At the end of the class, present the students with the GIT project & please ask each student to start coding its corresponding part of the website.", "description": "A text editor and the console - that's all you need to be a great coder. Time to master the second one.", "key-concepts": ["Most used CMD commands", "File Directory Hierarchy", "Relative ./ vs Absolute Paths ", "Moving Up ..", "Autocomplete with TAB", "GIT in a general way"], "technologies": ["Command Line"], "teacher_instructions": "Teach the command line to your students, use the CMD challenge to make it very fun! Start with a small explanation about the importance of the CMD and then explain each command after its respective challenge is completed."}, {"label": "Day 4", "lessons": [{"slug": "how-to-use-git-version-control-system", "title": "GIT (Version Control System)"}], "project": {"title": "GIT Colaborative Landing Page", "instructions": "https://github.com/breatheco-de/exercise-collaborative-html-website/"}, "replits": [{"slug": "git", "title": "Git interactive tutorial"}], "homework": "If some of the students have not finished their piece of the landing page, they have to finish it by next class, also ask them to try starting to deliver all the previous projects thru the BreatheCode Platform. Lastly ask them to finish all replits and projects.", "description": "The CMD Line has millions of tools, it's time to learn the first ones: GIT & Github - together they make collaboration amazing!", "instructions": "Time to explain and practice with GIT in detail, create a repository for your Landing Page GIT project and make them clone it and upload their piece of the project. Review the key concepts.", "key-concepts": ["Do not explain Git SSH credentials in detail, students must use HTTP", "Why using Github?", "It will be impossible to avoid using github", "The Commit Object", "The HEAD", "The Stage", "Branch", "Commit vs PUSH", "Resolving Conflicts"], "technologies": ["Git", "Github", "Markdown"]}, {"label": "Day 5", "project": {"title": "Fixing misspells, the perfect IceBraker for Open Source contributions", "instructions": "https://github.com/breatheco-de/the-misspell-chalenge/"}, "homework": "Finished Replits and Projects", "assignments": ["fix-the-misspell"], "description": "There is a lot to do, use this class to catch up on all your homework and ask any questions you may have because next day we are starting javascript!", "teacher_instructions": "Students have a lot of homework, today is perfect catch-up day and also learning on how to contribute on Github by fixing misspells."}, {"label": "Day 6", "lessons": [{"slug": "what-is-javascript-learn-to-code-in-javascript", "title": "Learning to code with JS"}], "project": {"title": "The Excuse Generator", "solution": "https://bitbucket.org/codingacademy/excuse-generator/", "instructions": "https://projects.breatheco.de/d/excuse-generator#readme"}, "replits": [{"slug": "js-beginner", "title": "Introduction to JS", "vtutorial_slug": "begin-js"}], "homework": "Students need to finish the Excuse Generator, make the replits about JavaScript and complete the layout for the Random Card Generator", "assignments": ["excuse-generator"], "description": "HTML & CSS are great, but the world needed interactive pages (not just beautiful text documents). JavaScript comes to help us generate HTML & CSS based commands after the initial text document has already loaded.  JavaScript will also re-write the website live, based on the user's activity.", "instructions": "Explain the basic coding concepts (variables, data-types, functions, loops, arrays, etc.), then start the excuse generator is a great way to explain how JavaScript and HTML/CSS can play together. Use the VanillaJS boilerplate, that way students will start getting used to it", "key-concepts": ["All datatypes in javascript", "What is a variable", "Arrays", "The code is a procedure from top to bottom (for now)", "You can skip lines with conditionals", "Do not explain looping yet", "Do not explain functions yet", "Null vs Undefined", "Generating random numbers"], "technologies": ["JavaScript"]}, {"label": "Day 7", "lessons": [{"slug": "conditionals-in-programing-coding", "title": "Using Conditional in Algorithms"}, {"slug": "what-is-webpack", "title": "Bundling with Webpack"}], "project": {"title": "Conditional Profile Card", "instructions": "https://github.com/breatheco-de/conditional-profile-card"}, "replits": [{"slug": "functions", "title": "Working with functions"}, {"slug": "js-devmaker", "title": "Mastering JS"}], "homework": "Finish the profile card and replits to date", "assignments": ["conditional-profile-card"], "description": "What we call \"thinking\" it's basically the process of making decitions based on some information (variables) that we have available. You can replicate the same behavior in a computer by using conditionals and logical operations.", "key-concepts": ["Every JavaScript code starts OnLoad", "String Concatenation", "Variable Initialization", "If... Else", "Some times else is not needed", "Ternaries and one case were they make sense", "What is compiling?", "Why the Javascript community decided to bundle (compatibility, ES6, performance, etc.)", "Please do not attempt to explain the Webpack Config.", "Bundling JS, CSS & Images", "Include your bundle on index.html", "We can use NPM to download popular functions (libraries)"], "technologies": ["Webpack"], "teacher_instructions": "Today we will be introducing webpack and npm for the first time, just the basics. Ask students to gather and create a flow chart on the whiteboard with the decision process behind building the html for the profile card project. Finish conditional profile card and all previous replits. "}, {"label": "Day 8", "lessons": [{"slug": "what-is-an-array-define-array", "title": "Looping and Arrays"}], "project": {"title": "Domain Name Generator", "instructions": "https://projects.breatheco.de/d/domain-generator#readme"}, "replits": [{"slug": "arrays", "title": "Looping and Arrays"}], "homework": "Finish the domain name generator and work hard on the JS replits for Begin JS, Arrays, Functions and Mastering JS", "assignments": ["domain-generator"], "description": "Arrays are the only way to have a list of things in programming, and they are challenging because develoeprs need to master the art of getting or setting values from arrays using loops", "instructions": "Review everything we have seen so far very quick, reinforce that we are building HTML using JS now, ask the students and ask them to strategize on the white board, before starting to code reinforce the ONLOAD function as the beginning of your application, start using the breathecode-cli and vanilla-js ", "key-concepts": ["Functions (anonymous vs normal)", "The forEach", "Every JavaScript code starts OnLoad", "String Concatenation", "Main website events: PreLoad & OnLoad", "The-Runtime (after OnLoad)", "Introduce the DOM", "Use querySelector() to select DOM Elements just like you do with CSS", "Add/Remove CSS Classes to DOM elements", "Please do not attempt to explain the Webpack Config.", "Bundling JS, CSS & Images.", "Include your bundle on index.html (only one scriptag from no on)"], "technologies": ["Algorithms"]}, {"label": "Day 9", "project": {"title": "Student External Profile", "solution": "http://sep.4geeksacademy.co/alesanchezr", "instructions": "https://projects.breatheco.de/d/learn-in-public#readme"}, "homework": "Students must finish their student external profile and start the replits about Begin JS, Arrays and Functions", "assignments": ["learn-in-public"], "description": "Your entire journey at the academy can de summarized into one landing page: The Student External Profile. It is time to start building it.", "key-concepts": ["How to Pull Request", "How to use GIT", "What is the Student External Profile", "Store Using YML"], "technologies": ["git", "html", "css"], "teacher_instructions": "Finish pending replits, make sure students upload projects into their github accounts and finish the Student External Profile"}, {"label": "Day 10", "lessons": [{"slug": "what-is-front-end-development", "title": "Introduction to Front-End Web Development"}, {"slug": "what-is-dom-define-dom", "title": "The DOM"}, {"slug": "event-driven-programming", "title": "Events"}], "project": {"title": "Random Card Generator", "solution": "https://bitbucket.org/codingacademy/random-card/"}, "replits": [{"slug": "the-dom", "title": "The DOM"}, {"slug": "events", "title": "Events"}], "homework": "Finish the Random Card and pending replits, start DOM & EVENTS replits", "assignments": ["random-card"], "description": "Ok but how do we use JavaScript to build websites? You have to interact with The DOM to create dynamic HTML/CSS and wait for events to occur", "key-concepts": ["Main website events: PreLoad & OnLoad", "The-Runtime (after OnLoad)", "Introduce the DOM", "Use querySelector() to select DOM Elements just like you do with CSS", "Add/Remove CSS Classes to DOM elements", "Please do not attempt to explain the Webpack Config.", "Bundling JS, CSS & Images.", "Include your bundle on index.html"], "technologies": ["DOM", "Events"], "teacher_instructions": "Do the Random Card using the VanillaJS template but focusing a lot on the workflow (how to plan your strategy and begin coding), reinforce the Window.onLoad event and how to change CSS styles from JS (apply rules and classes)"}, {"label": "Day 11", "project": "Work on the replits and projects", "homework": "Finished Replits and Projects", "description": "You have a lot of things to cach up on, finish and deliver the replit exercises and projects. Make sure to review the last replit of events (todo list).", "teacher_instructions": "Help students finish the replit exercises and projects. Make sure to review the last replit of events (todo list). IMPORTANT: This next coding weekend will be the last before getting into react, encourage students to attend."}, {"label": "Day 12", "lessons": [{"slug": "what-is-object-oriented-programming-concepts", "title": "Object Oriented Programming"}, {"slug": "learn-react-js-tutorial", "title": "Building interfaces with React"}, {"slug": "making-react-components", "title": "Creating React.js Components"}, {"slug": "react-hooks-explained", "title": "React Hooks Explained"}, {"slug": "javascript-import", "title": "Importing and Exporting from other JS files"}], "project": {"title": "Landing Page with React", "instructions": "https://projects.breatheco.de/d/landing-page-with-react#readme"}, "replits": [{"slug": "object-oriented-programing", "title": "Object Oriented Programming"}, {"slug": "react-js", "title": "Using React.js as a Rendering Engine"}], "homework": "Students must finish the landing page with react for the next class", "assignments": ["simple-counter-react", "landing-page-with-react"], "description": "But working with the DOM can get tricky and it's resource consuming, for that and many other reasons libraries like React.js got popular in the last couple of years. The let you create HTML and CSS using JS in a very intuitive way.", "instructions": "It's the first time students will be using objects, explain the concept (without classes). Make students create their first react components and explain the use of JSX. Only talk about functinal components, class components will be explained later. Landing page project should be a code along at start, then groups at end.", "key-concepts": ["Export -> Import modules", "You can create your own tags", "Create a Component like a Function", "JSX Syntax", "Component Properties"], "technologies": ["React", "O.O. Programing"]}, {"label": "Day 13", "project": "Work on the replits and projects", "homework": "Finished Replits and Projects", "description": "Its the first time you've heard or learn about react, we have given you a lot of exercises to practice. Please practice like crazy with all of them. Ask questions.", "instructions": "Students have now a lot of homework: The React Replits, Traffic Light, Counter and the Landing page. Work with students to help them complete the developments."}, {"label": "Day 14", "project": {"title": "Todo list with React", "solution": "https://bitbucket.org/codingacademy/todo-list/", "instructions": "https://projects.breatheco.de/d/todo-list#readme"}, "homework": "Students must finish the TodoList being able to add & delete tasks.", "assignments": ["todo-list", "traffic-light-react"], "description": "Finally we can create our own HTML tags and re-use them on several projects and views. The key to understand a component is understanding Props and The State. Please continue working on the Todo-List Application.", "instructions": "Review landing page. React as rendering engine: Students need to understand that now they can finally create their own HTML tags (React Components) and how to use the State and the Props. Have the class discuss the strategy for todo-list", "key-concepts": ["Controlled Inputs", "Condigional Rendering", "The component state", "The state is inmutable", "State vs Props", "Using const, map, filter and concat to prevent state mutation"], "technologies": ["Class Components"]}, {"label": "Day 15", "lessons": [{"slug": "asynchronous-algorithms-async-await", "title": "Asynchronous Scripting with Javascript"}, {"slug": "the-fetch-javascript-api", "title": "Javascript Fetch API"}, {"slug": "understanding-rest-apis", "title": "Understanding REST API's"}], "project": {"title": "Todo list with React and Fetch", "solution": "https://bitbucket.org/codingacademy/todolist-with-fetch", "instructions": "https://projects.breatheco.de/d/todo-list-react-with-fetch#readme"}, "homework": "Students must finish the all replits and projects", "assignments": ["todo-list-react-with-fetch"], "description": "Most of the applications build on the internet require some king of database syncronization, normal made thru several API requests.", "key-concepts": ["Using Fetch to retrieve information from the server", "Asyncrunus Programing", "Component Did Mount its ideal to fetch info", "Initializations on the component contructor before fetching", "Displaying a 'loading' before the data arrives", "Reseting the state when fetch finalizes", "POSTing, PUTing and DELETEing data to the server", "Sync the state with the server"], "technologies": ["Fetch API"], "teacher_instructions": "Introduce the concept of fetching help students finish the todo list and incorporate the synconization with the API"}, {"label": "Day 16", "lessons": [{"slug": "routing-our-views-with-react-router", "title": "Using React Router"}, {"slug": "context-api", "title": "Learning about Context.API"}], "project": {"title": "Starwars blog with reading list", "solution": "https://bitbucket.org/codingacademy/starwars-blog-reading-list/", "instructions": "https://projects.breatheco.de/d/starwars-blog-reading-list#readme"}, "homework": "Students must finish the all replits and projects", "assignments": ["starwars-blog-reading-list"], "description": "You know exactly how to build small js apps, but what if your application will have several pages/views? E.g.: Having a 'Settings' page on the Spotify clone. We need to connect different URLs to our React Components. Welcome to the world of Routing.", "key-concepts": ["Connecting Components to URLS (Routing)", "Defining Parameters on the URL Path", "Retrieving URL parameters with match.params", "Using withProps for components not connected directly to the <Route>", "Redirecting with history.push", "Fetching on didmount"], "technologies": ["FLUX & Context"], "teacher_instructions": "This project is all about URLs and Routing. Each student must build two views/pages: One List and one Single. For example: List of Space Ships and a view for a single Space Ship. The have to make sure the URL's are propery setup on the reouter and also that the information is fetch on the didmount of the respectiv view. Also, you will be using the Context API for MVC (Store, View, Actions)"}, {"label": "Day 17", "lessons": [], "project": {"title": "Starwars blog with reading list", "solution": "https://bitbucket.org/codingacademy/starwars-blog-reading-list/", "instructions": "https://bitbucket.org/codingacademy/starwars-blog-reading-list/"}, "homework": "Students must finish the all replits and projects", "assignments": [], "description": "Lets warp the last things about the Starwars Blog because we are about to dive into and exciting journey inside the world of backend! :)", "key-concepts": [], "technologies": ["FLUX & Context"], "teacher_instructions": "Help students finish the starwars blog and also any other previous exercises and project and publish them to github"}, {"label": "Day 18", "project": {"title": "Contact List (Using Context-API)", "solution": "https://bitbucket.org/codingacademy/contact-list", "instructions": "https://projects.breatheco.de/d/contact-list-context#readme"}, "replits": [], "homework": "Using POSTman, and then using React, students must consume the API to Save, Delete and Update Contacts.", "assignments": ["contact-list-context"], "description": "When your real application is almost ready, it's time to integrate with a real database. That will enable it to work with real information: Create, Update, Delete and get real data. We do HTTP Requests for that.", "key-concepts": ["How to use POSTMan, set environment variables and use collections", "JSON is a JavaScript object but as TEXT", "The goal is to send/receive everything as JSON Serialize>Send>Unserialize", "What is serialization and how to do it (Parsing)", "Why use several request types (GET, POST, PUT, DELETE)?", "Explain the 3 main content-types: Form, URL-Encoded, Raw (With JSON)"], "technologies": ["HTTP", "AJAX", "JSON", "HTTP Fetch", "API", "Serialization"], "teacher_instructions": "Now you can deep further into HTTP: Explain the other methods POST, PUT, DELETE. Present the new project that uses FLUX, Context and Fetch again, but now it lets the user to Create, Update and Delete information using an API"}, {"label": "Day 19", "project": {"title": "Finish the Contact List"}, "homework": "Students must finish the Contact Management API Integration", "description": "Make sure to finish the contact management project", "instructions": "Finish the Contact Managment API integration, focus on Debugging procedures and start the introduction to Python"}, {"label": "Day 20", "project": {"title": "Contact Management API Integration"}, "homework": "Students must finish the Contact Management Application", "description": "Make sure to finish the contact management project", "instructions": "One last day to finish the Contact Managment Application with your students, review all the Context, React, Components and HTTP Ajax concepts and best practices"}, {"label": "Day 21", "lessons": [{"slug": "agile-development", "title": "Agile Web Development"}, {"slug": "user-stories-examples", "title": "Creating User Stories"}], "project": {"title": "Final Project User Stories and Wireframes", "instructions": "https://projects.breatheco.de/d/full-stack-project-stories-and-wireframes#readme"}, "homework": "Students must finish the user stories by next class, remember that the student projects must meet certain conditions to be accepted.", "assignments": ["full-stack-project-stories-and-wireframes"], "description": "Time to start the Final project! Lets review how software is built today, you'll learn and follow the same methods used by the top tech companies in the world.", "key-concepts": ["What is a Kanban board and how does it work", "How to use Github's kanban automated board", "Adding one issue per user story", "Writting stories int he users point of view", "Acceptance Criteria", "You application roles & capabilities", "Standup Meeting"], "technologies": ["SCRUM", "User Stories", "Kanban", "Agile Methodologies"], "teacher_instructions": "Time to start the Final project! Let's give the students a break and dive into User Stories and the SCRUM methodology. Students must pick their projects & partner, and start building the user stories using Github Project. Create a project with them."}, {"label": "Day 22", "lessons": [], "project": {"title": "Coding the Project Views"}, "homework": "Sit with every project team and discuss how to split the code into Views vs Components, students must finish their project home layout by next class", "assignments": ["full-stack-project-prototype"], "description": "Today you will be coding your final project HTML Views and making them React Views", "instructions": "Continue working on the final project but now start building the React Views, use the FLUX boilerplate with the students and start organizing eveyrthing from Layout.jsx", "key-concepts": ["Reinforce the Minimum Viable Product concept", "Students should not get excited about npm packages, use only a handfull", "Usign React-Strap is a great idea to save some time"], "technologies": ["Wireframing", "React JS"]}, {"label": "Day 23", "project": {"title": "Build your project Views"}, "homework": "Students must deliver the first views of their projects", "description": "Keep working on your final project final HTML/CSS and React Views. Link them together as a prototype and be ready to start the backend side of the web.", "teacher_instructions": "Work with students to complete the HTML/CSS, React Views and Components. Make sure they are on their way to complete a 'Prototipe' that is close to the front-end side of their projects"}, {"label": "Day 24", "project": {"title": "Build your project Views"}, "homework": "Students (in groups) must create a 4 page website (Home, Blog, Product, Checkout-Cart) using React Router", "description": "Please work hard with your team on completing your front-end views, this will be the last font-end only day and we will start building your Project API next monday", "technologies": ["React Router"], "teacher_instructions": "Help students to finish their prototype, make sure it follows best practices and unstuck them on any problems they may encounter"}, {"label": "Day 25", "lessons": [{"slug": "python-syntax", "title": "Welcome to the world of Python"}], "project": {"title": "Data Structure/Model Previous Projects", "instructions": "https://github.com/breatheco-de/exercise-data-model-previous-projects"}, "replits": [{"slug": "python-beginner", "title": "Learn Python"}, {"slug": "python-functions", "title": "Learn Python Functions"}, {"slug": "python-lists", "title": "Python Loops and Lists"}], "homework": "Students must finish the all replits and projects", "assignments": [], "description": "The backend side of the web is all about creating API's for data storing and processing; and integrating with 3rd party API's. The first step of that process is storing the information.", "key-concepts": ["Different Types of Data Structures (with examples)", "Review different approaches for the TODO List", "Review different approaches for the Contact List", "Object vs Array", "Example of a very complicated object", "Calculated properties like age"], "technologies": ["Data Structures & Model"], "teacher_instructions": "Go back to HTTP and explain that the backend purpose is to respond to the requests with the right information the front-end wants. Work on doing the model/structure of previously made most important projects"}, {"label": "Day 26", "lessons": [{"slug": "what-is-sql-database", "title": "Understanding SQL (Relational Databases)"}], "project": {"title": "Work on SQL Replits"}, "replits": [{"slug": "sql", "title": "Learn SQL"}], "homework": "Students must finish the all replits and projects", "assignments": [], "description": "Database engines are not related particular languages (like Python, PHP or Node) and they run on a different server than the website or application. For that reason and many others databases have their own language: SQL", "key-concepts": ["SQL Table vs SQL Alchemy Model", "Table Relations: 1-1, 1-N, N-N", "Metadata vs Data", "INSER, UPDATET, DELETE, UPDATE", "ALTER, DROP", "Transactions: COMMT"], "technologies": ["SQL"], "teacher_instructions": "The have done one database using SQL Alchemy, it is time to explain how SQL database work and how to write some SQL to interact with them, look at the full teacher instrutcions for more details"}, {"label": "Day 27", "lessons": [{"slug": "everything-you-need-to-start-using-sqlalchemy", "title": "SQL Alchemy"}], "project": {"title": "Building Instagram Data Model & Stories", "instructions": "https://projects.breatheco.de/d/instagram-data-modeling#readme"}, "homework": "Students must finish the all replits and projects", "assignments": ["instagram-data-modeling"], "description": "The backend its all about data, structures and databases. Let's review how to createt a database model and connect it to our Python backend", "key-concepts": ["Why do we have to draw the database first?", "It is hard to change the database in the middle of development", "UML has become the standard for diagrams", "SQLAlchemy is the most popular library for python database", "Instead of SQL We will use ORM's for 90% of our database needs", "ORM's translate Python Objects and Functions into SQL Language", "Databases have more data-types than programing languages", "Relationships can be 1-1 1-N or N-N"], "technologies": ["Data-Modeling"], "teacher_instructions": "Take the mayority of the class to draw the UML diagram of Instagram, then, explain User Stories with an example really fast, explain why they exists and the different between reuierments and stories and whay that matters. Build a couple of stories and then let the students start building the instagram stories right way."}, {"label": "Day 28", "lessons": [{"slug": "understanding-rest-apis", "title": "Building REST API's"}, {"slug": "building-apis-with-python-flask", "title": "Building REST API's with Flask"}], "project": {"title": "Build a Todolist API and Integrate with Todo App", "solution": "https://github.com/breatheco-de/python-flask-api-tutorial"}, "homework": "Students must finish the todolist api", "assignments": ["python-flask-api-tutorial"], "description": "Welcome to the back-end! The back-end side has almost no limitations, you have access to the entire computer, printers or anything you need. Your life as a back-end developer will start by doing API's because it is the most needed skill in the market. We really hope you like it as much as we do!", "key-concepts": ["Python has access to the Entire Machine", "Python has packages just like NPM but it is called (Pipenv)", "The Pipfile is like the package.json", "Flask its the most popular Python Framework", "Workflow for Creating an endpoint in Flask (The same MVC pattern but now on the backend)", "Flask easily with SQLAlchemy (models.py)", "What is Serialization (jsonify)"], "technologies": ["Flask", "API's", "Serialization"], "teacher_instructions": "First, run a simple Python script in the shell, explain the benefits and capabilities that it brings in the back-end. Then, follow the interactive Flask tutorial and explain the sample API that comes with it (remember the todo list?), then ask the students to build the API for the TodoList they already coded on the front-end"}, {"label": "Day 29", "project": {"title": "Continue working on the todolist"}, "homework": "Finish python replits and pending projects", "description": "Continue working on the todolist", "technologies": ["Web Framework", "API"], "teacher_instructions": "Help students finish pending the todo-list api"}, {"label": "Day 30", "project": {"title": "Family Tree API", "instructions": "https://projects.breatheco.de/d/family-static-api#readme"}, "homework": "Finish python replits and pending projects", "assignments": ["family-static-api"], "description": "Lets keep working on the backend and get more familiar with Python's dictionaries, lists and the lamdba function", "key-concepts": ["Python has dictonaries instead of object literals", "Python has lamda instead of arrow functions", "Python has lists and tuples instead of arrays", "Explain how to map an array with lambda"], "technologies": ["Web Framework", "API"], "teacher_instructions": "This lessons is about data-structures + API. We are trying to make students use a class/data-structure to build the API around it. Lets build another API but now using a more complicated data-structures on the Backend."}, {"label": "Day 31", "project": {"title": "Family Tree API", "instructions": "https://projects.breatheco.de/d/family-static-api#readme"}, "homework": "Finish python replits and pending projects", "description": "Continue working on the family tree", "technologies": ["Web Framework", "API"], "teacher_instructions": "Help students finish pending backend projects"}, {"label": "Day 32", "project": {"title": "Students must start building their backend API"}, "homework": "Finish python replits and pending projects", "description": "You have built 2 different API's using python already, it is time to start working on your own. Start by building your UML diagram and setting up the repository", "technologies": ["Final Project"], "teacher_instructions": "Time to start working on your final project backend"}, {"label": "Day 47", "project": {"title": "Final presentation rehersal"}, "description": "A great way of rehearsing is by presenting the final project to your classmates", "instructions": "Create a 'rehersal day' and let the students present the project to their classmates"}, {"label": "Pitch Day", "description": "You have worked a lot during these weeks, it's time to present the final project and enjoy with your family and friends!", "instructions": "Answer any question your students may have"}], "label": "Full-Stack Development", "profile": "full-stack", "description": "Become a full-stack web developer using the 2 most popular technologies in the world: Javascript, React and Python"}, "github_url": "https://github.com/4GeeksAcademy/academy-syllabus/blob/master/full-stack/v3/full-stack.v3.json", "course": 1, "created_at": "2020-11-09T17:15:11.457Z", "updated_at": "2020-11-09T17:16:05.926Z"}}]